<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Outcome documentation</title>
    <link>https://ned14.github.io/outcome/</link>
    <description>Recent content in Home on Outcome documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://ned14.github.io/outcome/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://ned14.github.io/outcome/_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/_header/</guid>
      <description>Outcome 2.0 library documentation</description>
    </item>
    
    <item>
      <title>Acknowledgements</title>
      <link>https://ned14.github.io/outcome/credits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/credits/</guid>
      <description>github contributors .ghContributors{display:flex;flex-flow: wrap;align-content: flex-start}.ghContributors  div{width: 50% ;display: inline-flex;margin-bottom: 5px;}.ghContributors  div label{padding-left: 4px ;}.ghContributors  div span{font-size: x-small;padding-left: 4px ;}@ned14482 commits@jenkins-nedprod1 commits This pretty, modern C++ documentation  Hugo - static website generator of this documentation. hugo-theme-docdock - the Hugo theme used by this documentation.</description>
    </item>
    
    <item>
      <title>outcome&lt;R, S, P&gt;</title>
      <link>https://ned14.github.io/outcome/api-reference/doc_outcome.md/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/api-reference/doc_outcome.md/</guid>
      <description>Header file outcome.hpp #define OUTCOME_OUTCOME_HPP namespace outcome { class bad_outcome_access; namespace trait { template &amp;lt;class P&amp;gt; struct is_exception_ptr; } struct no_payload_type; struct no_exception_type; namespace impl { template &amp;lt;class Base, class R, class S, class P, class NoValuePolicy&amp;gt; class outcome_payload_observers; template &amp;lt;class Base, class R, class S, class NoValuePolicy&amp;gt; class outcome_payload_observers&amp;lt;Base, R, S, void, NoValuePolicy&amp;gt;; template &amp;lt;class Base, class R, class S, class P, class NoValuePolicy&amp;gt; class outcome_exception_observers; template &amp;lt;class Base, class R, class S, class NoValuePolicy&amp;gt; class outcome_exception_observers&amp;lt;Base, R, S, void, NoValuePolicy&amp;gt;; } namespace policy { template &amp;lt;class R, class S, class P&amp;gt; using default_outcome_policy = std::conditional_t&amp;lt;//detail::is_same_or_constructible&amp;lt;std::error_code, S&amp;gt;&amp;amp;&amp;amp;trait::is_exception_ptr&amp;lt;P&amp;gt;::value, error_code_throw_as_system_error_exception_rethrow&amp;lt;R, S, P&amp;gt;, //terminate//&amp;gt;; } template &amp;lt;class R, class S = error_code_extended, class P = std::exception_ptr, class NoValuePolicy = policy::default_outcome_policy&amp;lt;R, S, P&amp;gt;&amp;gt; class outcome; namespace policy { template &amp;lt;class R, class S, class P&amp;gt; struct error_code_throw_as_system_error_exception_rethrow; } namespace impl { } } Class outcome::bad_outcome_access class bad_outcome_access : public std::logic_error { public: bad_outcome_access(const char* what); }; Thrown when you try to access state in a outcome&amp;lt;T, EC, E&amp;gt; which isn&amp;rsquo;t present.</description>
    </item>
    
    <item>
      <title>result&lt;R, S&gt;</title>
      <link>https://ned14.github.io/outcome/api-reference/doc_result.md/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/api-reference/doc_result.md/</guid>
      <description>Header file result.hpp #define OUTCOME_RESULT_HPP #define OUTCOME_SYMBOL_VISIBLE #define OUTCOME_NODISCARD #define OUTCOME_ENABLE_POSITIVE_STATUS namespace outcome { template &amp;lt;class T&amp;gt; struct in_place_type_t; class bad_result_access; struct no_error_type; namespace impl { template &amp;lt;class R, class EC, class NoValuePolicy&amp;gt; class result_storage; template &amp;lt;class Base, class R, class NoValuePolicy&amp;gt; class result_value_observers; template &amp;lt;class Base, class NoValuePolicy&amp;gt; class result_value_observers&amp;lt;Base, void, NoValuePolicy&amp;gt;; template &amp;lt;class Base, class EC, class NoValuePolicy&amp;gt; class result_error_observers; template &amp;lt;class Base, class NoValuePolicy&amp;gt; class result_error_observers&amp;lt;Base, void, NoValuePolicy&amp;gt;; template &amp;lt;class R, class EC, class NoValuePolicy&amp;gt; using select_result_impl = result_error_observers&amp;lt;result_value_observers&amp;lt;result_storage&amp;lt;R, EC, NoValuePolicy&amp;gt;, R, NoValuePolicy&amp;gt;, EC, NoValuePolicy&amp;gt;; template &amp;lt;class R, class S, class NoValuePolicy&amp;gt; class result_final; } namespace policy { template &amp;lt;class EC&amp;gt; struct throw_directly; template &amp;lt;class EC&amp;gt; struct error_code_throw_as_system_error; template &amp;lt;class EC&amp;gt; struct exception_ptr_rethrow; struct terminate; template &amp;lt;class EC&amp;gt; using default_result_policy = std::conditional_t&amp;lt;//std::is_void&amp;lt;EC&amp;gt;::value, //terminate, //std::conditional_t&amp;lt;//detail::is_same_or_constructible&amp;lt;std::error_code, EC&amp;gt;, error_code_throw_as_system_error&amp;lt;EC&amp;gt;, //std::conditional_t&amp;lt;//detail::is_same_or_constructible&amp;lt;std::exception_ptr, EC&amp;gt;, exception_ptr_rethrow&amp;lt;EC&amp;gt;, //throw_directly&amp;lt;EC&amp;gt;//&amp;gt;&amp;gt;&amp;gt;; } template &amp;lt;class R, class S = error_code_extended, class NoValuePolicy = policy::default_result_policy&amp;lt;S&amp;gt; class result; template &amp;lt;class NoValuePolicy&amp;gt; class result&amp;lt;void, void, NoValuePolicy&amp;gt;; } Macro OUTCOME_ENABLE_POSITIVE_STATUS #define OUTCOME_ENABLE_POSITIVE_STATUS Define to enable positive value + status returns</description>
    </item>
    
  </channel>
</rss>