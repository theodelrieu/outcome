<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Outcome documentation</title>
    <link>https://ned14.github.io/outcome/</link>
    <description>Recent content in Home on Outcome documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://ned14.github.io/outcome/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>outcome&lt;R, S, P&gt;</title>
      <link>https://ned14.github.io/outcome/api-reference/doc_outcome.md/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/api-reference/doc_outcome.md/</guid>
      <description>Header file outcome.hpp #define OUTCOME_OUTCOME_HPP namespace outcome_v2_xxx { class bad_outcome_access; namespace trait { template &amp;lt;class P&amp;gt; struct is_exception_ptr; } struct no_payload_type; struct no_exception_type; namespace impl { template &amp;lt;class Base, class R, class S, class P, class NoValuePolicy&amp;gt; class outcome_payload_observers; template &amp;lt;class Base, class R, class S, class NoValuePolicy&amp;gt; class outcome_payload_observers&amp;lt;Base, R, S, void, NoValuePolicy&amp;gt;; template &amp;lt;class Base, class R, class S, class P, class NoValuePolicy&amp;gt; class outcome_exception_observers; template &amp;lt;class Base, class R, class S, class NoValuePolicy&amp;gt; class outcome_exception_observers&amp;lt;Base, R, S, void, NoValuePolicy&amp;gt;; template &amp;lt;class Base, class R, class S, class P, class NoValuePolicy&amp;gt; class outcome_failure_observers; template &amp;lt;class Base, class R, class NoValuePolicy&amp;gt; class outcome_failure_observers&amp;lt;Base, R, std::error_code, std::exception_ptr, NoValuePolicy&amp;gt;; } namespace policy { template &amp;lt;class R, class S, class P&amp;gt; using default_outcome_policy = std::conditional_t&amp;lt;//detail::is_same_or_constructible&amp;lt;std::error_code, S&amp;gt;&amp;amp;&amp;amp;trait::is_exception_ptr&amp;lt;P&amp;gt;::value, error_code_throw_as_system_error_exception_rethrow&amp;lt;R, S, P&amp;gt;, //terminate//&amp;gt;; } template &amp;lt;class T, class U&amp;gt; constexpr void hook_outcome_construction(in_place_type_t&amp;lt;T&amp;gt;, U*) noexcept; template &amp;lt;class T, class U&amp;gt; constexpr void hook_outcome_copy_construction(in_place_type_t&amp;lt;T&amp;gt;, U*) noexcept; template &amp;lt;class T, class U&amp;gt; constexpr void hook_outcome_move_construction(in_place_type_t&amp;lt;T&amp;gt;, U*) noexcept; template &amp;lt;class T, class U&amp;gt; constexpr void hook_outcome_in_place_construction(in_place_type_t&amp;lt;T&amp;gt;, U*) noexcept; template &amp;lt;class R, class S = std::error_code, class P = std::exception_ptr, class NoValuePolicy = policy::default_outcome_policy&amp;lt;R, S, P&amp;gt;&amp;gt; class outcome; template &amp;lt;class T, class U, class V, class R, class S, class P, class N&amp;gt; constexpr )//&amp;gt;bool operator==(const result&amp;lt;T, U, V&amp;gt;&amp;amp; a, const outcome&amp;lt;R, S, P, N&amp;gt;&amp;amp; b) noexcept(//noexcept(std::declval&amp;lt;outcome&amp;lt;R, S, P, N&amp;gt;&amp;gt;()==std::declval&amp;lt;result&amp;lt;T, U, V&amp;gt;&amp;gt;())); template &amp;lt;class T, class U, class V, class R, class S, class P, class N&amp;gt; constexpr )//&amp;gt;bool operator!</description>
    </item>
    
    <item>
      <title>result&lt;T, EC&gt;</title>
      <link>https://ned14.github.io/outcome/synopsis/result/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/synopsis/result/</guid>
      <description>template &amp;lt; class R, class S = std::error_code, class NoValuePolicy = policy::default_result_policy&amp;lt;S&amp;gt; &amp;gt; requires std::is_void&amp;lt;EC&amp;gt;::value || std::is_default_constructible&amp;lt;EC&amp;gt;::value class [[nodiscard]] result { public: /// \output_section Member types //! The success type. using value_type = R; //! The S type configured using status_error_type = S; //! The failure type. using error_type = S; //! Used to disable in place type construction when `value_type` and `error_type` are ambiguous. using value_type_if_enabled = typename base::_value_type; //!</description>
    </item>
    
    <item>
      <title>outcome&lt;T, EC, E&gt;</title>
      <link>https://ned14.github.io/outcome/synopsis/outcome/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/synopsis/outcome/</guid>
      <description>template &amp;lt; class R, class S = std::error_code, class P = std::exception_ptr, class NoValuePolicy = policy::default_outcome_policy&amp;lt;R, S, P&amp;gt; &amp;gt; requires (std::is_void&amp;lt;EC&amp;gt;::value || std::is_default_constructible&amp;lt;EC&amp;gt;::value) &amp;amp;&amp;amp; (std::is_void&amp;lt;P&amp;gt;::value || std::is_default_constructible&amp;lt;P&amp;gt;::value) class [[nodiscard]] outcome { public: /// \output_section Member types //! The success type. using value_type = R; //! The S type configured using status_error_type = S; //! The failure type. using error_type = S; //! The P type configured. using payload_exception_type = P; //!</description>
    </item>
    
    <item>
      <title>result&lt;R, S&gt;</title>
      <link>https://ned14.github.io/outcome/api-reference/doc_result.md/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/api-reference/doc_result.md/</guid>
      <description>Header file result.hpp #define OUTCOME_RESULT_HPP #define OUTCOME_ENABLE_POSITIVE_STATUS namespace outcome_v2_xxx { class bad_result_access; struct no_value_type; struct no_error_type; namespace impl { template &amp;lt;class R, class EC, class NoValuePolicy&amp;gt; class result_storage; template &amp;lt;class Base, class R, class NoValuePolicy&amp;gt; class result_value_observers; template &amp;lt;class Base, class NoValuePolicy&amp;gt; class result_value_observers&amp;lt;Base, void, NoValuePolicy&amp;gt;; template &amp;lt;class Base, class EC, class NoValuePolicy&amp;gt; class result_error_observers; template &amp;lt;class Base, class NoValuePolicy&amp;gt; class result_error_observers&amp;lt;Base, void, NoValuePolicy&amp;gt;; template &amp;lt;class R, class EC, class NoValuePolicy&amp;gt; using select_result_impl = result_error_observers&amp;lt;result_value_observers&amp;lt;result_storage&amp;lt;R, EC, NoValuePolicy&amp;gt;, R, NoValuePolicy&amp;gt;, EC, NoValuePolicy&amp;gt;; template &amp;lt;class R, class S, class NoValuePolicy&amp;gt; class result_final; } namespace policy { template &amp;lt;class EC&amp;gt; struct throw_directly; template &amp;lt;class EC&amp;gt; struct error_code_throw_as_system_error; template &amp;lt;class EC&amp;gt; struct exception_ptr_rethrow; struct terminate; template &amp;lt;class EC&amp;gt; using default_result_policy = std::conditional_t&amp;lt;//std::is_void&amp;lt;EC&amp;gt;::value, //terminate, //std::conditional_t&amp;lt;//detail::is_same_or_constructible&amp;lt;std::error_code, EC&amp;gt;, error_code_throw_as_system_error&amp;lt;EC&amp;gt;, //std::conditional_t&amp;lt;//detail::is_same_or_constructible&amp;lt;std::exception_ptr, EC&amp;gt;, exception_ptr_rethrow&amp;lt;EC&amp;gt;, //throw_directly&amp;lt;EC&amp;gt;//&amp;gt;&amp;gt;&amp;gt;; } template &amp;lt;class T, class U&amp;gt; constexpr void hook_result_construction(in_place_type_t&amp;lt;T&amp;gt;, U*) noexcept; template &amp;lt;class T, class U&amp;gt; constexpr void hook_result_copy_construction(in_place_type_t&amp;lt;T&amp;gt;, U*) noexcept; template &amp;lt;class T, class U&amp;gt; constexpr void hook_result_move_construction(in_place_type_t&amp;lt;T&amp;gt;, U*) noexcept; template &amp;lt;class T, class U&amp;gt; constexpr void hook_result_in_place_construction(in_place_type_t&amp;lt;T&amp;gt;, U*) noexcept; template &amp;lt;class R, class S, class NoValuePolicy&amp;gt; class result; template &amp;lt;class R, class S, class P&amp;gt; void swap(result&amp;lt;R, S, P&amp;gt;&amp;amp; a, result&amp;lt;R, S, P&amp;gt;&amp;amp; b) noexcept(noexcept(a.</description>
    </item>
    
    <item>
      <title>Try operations</title>
      <link>https://ned14.github.io/outcome/api-reference/doc_try.md/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/api-reference/doc_try.md/</guid>
      <description>Header file try.hpp #define OUTCOME_TRY_HPP #define OUTCOME_TRY_GLUE2(x, y) #define OUTCOME_TRY_GLUE(x, y) #define OUTCOME_TRY_UNIQUE_NAME #define OUTCOME_TRYV2(unique, m) #define OUTCOME_TRY2(unique, v, m) #define OUTCOME_TRYV(m) #define OUTCOME_TRYX(m) #define OUTCOME_TRY(v, m) namespace outcome_v2_xxx { template &amp;lt;class T&amp;gt; typename T::template rebind&amp;lt;void&amp;gt; try_operation_return_as(T&amp;amp;&amp;amp; v); } Macro OUTCOME_TRYV #define OUTCOME_TRYV(m) If the outcome returned by expression m is not valued, propagate any failure by immediately returning that failure state immediately
Macro OUTCOME_TRYX #define OUTCOME_TRYX(m) If the outcome returned by expression m is not valued, propagate any failure by immediately returning that failure state immediately, else become the unwrapped value as an expression.</description>
    </item>
    
    <item>
      <title>Utilities</title>
      <link>https://ned14.github.io/outcome/api-reference/doc_utils.md/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/api-reference/doc_utils.md/</guid>
      <description>Header file utils.hpp #define OUTCOME_ERROR_FROM_EXCEPTION_HPP namespace outcome_v2_xxx { std::error_code error_from_exception(std::exception_ptr&amp;amp;&amp;amp; ep, std::error_code not_matched = std::make_error_code(std::errc::resource_unavailable_try_again)) noexcept; } Function outcome_v2_xxx::error_from_exception std::error_code error_from_exception(std::exception_ptr&amp;amp;&amp;amp; ep, std::error_code not_matched = std::make_error_code(std::errc::resource_unavailable_try_again)) noexcept; Utility function which tries to match the exception in the pointer provided to an equivalent error code. Ought to work for all standard STL types. param e The pointer to an exception to convert. If matched, on exit this is reset to a null pointer.</description>
    </item>
    
    <item>
      <title>iostream support</title>
      <link>https://ned14.github.io/outcome/api-reference/iostream_support.md/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/api-reference/iostream_support.md/</guid>
      <description>Header file iostream_support.hpp #define OUTCOME_IOSTREAM_SUPPORT_HPP namespace outcome_v2_xxx { template &amp;lt;class R, class S, class P&amp;gt; std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; s, result&amp;lt;R, S, P&amp;gt;&amp;amp; v); template &amp;lt;class R, class S, class P&amp;gt; std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; s, const result&amp;lt;R, S, P&amp;gt;&amp;amp; v); template &amp;lt;class R, class S, class P&amp;gt; std::string print(const result&amp;lt;R, S, P&amp;gt;&amp;amp; v); template &amp;lt;class R, class S, class P, class N&amp;gt; std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; s, outcome&amp;lt;R, S, P, N&amp;gt;&amp;amp; v); template &amp;lt;class R, class S, class P, class N&amp;gt; std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; s, const outcome&amp;lt;R, S, P, N&amp;gt;&amp;amp; v); template &amp;lt;class R, class S, class P, class N&amp;gt; std::string print(const outcome&amp;lt;R, S, P, N&amp;gt;&amp;amp; v); } Input operator outcome_v2_xxx::operator&amp;gt;&amp;gt; template &amp;lt;class R, class S, class P&amp;gt; std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; s, result&amp;lt;R, S, P&amp;gt;&amp;amp; v); Deserialise a result</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ned14.github.io/outcome/_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/_header/</guid>
      <description>Outcome 2.0 library documentation</description>
    </item>
    
    <item>
      <title>Acknowledgements</title>
      <link>https://ned14.github.io/outcome/credits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/credits/</guid>
      <description>github contributors .ghContributors{ display:flex; flex-flow: wrap; align-content: flex-start } .ghContributors  div{ width: 50% ; display: inline-flex; margin-bottom: 5px; } .ghContributors  div label{ padding-left: 4px ; } .ghContributors  div span{ font-size: x-small; padding-left: 4px ; }   @ned14 555 commits   @akrzemi1 2 commits   @jenkins-nedprod 1 commits   This pretty, modern C++ documentation  Hugo - static website generator of this documentation. hugo-theme-docdock - the Hugo theme used by this documentation.</description>
    </item>
    
  </channel>
</rss>